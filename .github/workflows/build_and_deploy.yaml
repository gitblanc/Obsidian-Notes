name: Build & deploy

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ master ]
    paths:
      - 'docs/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v4
      with:
        node-version: 20
    - uses: chetan/git-restore-mtime-action@v2
    - name: Cache  üíæ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache
          pandoc-3.2-1-amd64.deb
        key: ${{ runner.os }}-pip-
        restore-keys: ${{ runner.os }}-pip-
    - name: Setup Python üêç
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Setup pandoc ‚öôÔ∏è
      run: |
        sudo apt-get update
        test -f pandoc-3.2-1-amd64.deb || wget https://github.com/jgm/pandoc/releases/download/3.2/pandoc-3.2-1-amd64.deb
        sudo dpkg -i pandoc-3.2-1-amd64.deb
        sudo apt-get install -y texlive texlive-xetex texlive-latex-extra lmodern librsvg2-bin fonts-symbola
        pip install --upgrade pip
        pip install Pygments pandoc-include
    - name: Fetch previous version ‚§µÔ∏è # <- To save some compilation time, we download the last release and unzip it. We also synchronize the project files back in the source/ folder, to gain some time.
      run: |
          cd /home/runner/work/gitblanc.github.io/obsidian-notes/docs/
          make fetch
    - name: Build üèóÔ∏è
      run: |
        cd /home/runner/work/princomp.github.io/obsidian-notes/docs/
        make all
    - name: Create package üéÅ
      uses: crowbarmaster/GH-Automatic-Releases@latest
      with:
        automatic_release_tag: "latest"
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true
        draft: false
        files: content/release.zip
    - name: Switching to quartz ü™¥
      run: git checkout quartz # <- This part is a bit tricky. We built the content/ folder previously, and since it is not tracked by github, this folder stays even if we change branch.
      # If we had two different workflow, we would need to re-download the package created previously before being able to deploy the website.
    - name: Install Dependencies
      run: npm ci
    - name: Build Quartz
      run: npx quartz build
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: public

  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
